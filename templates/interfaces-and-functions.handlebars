{{#*inline "interfacePartial"}}
export interface {{interfaceName}} {
  {{#each additionalProperties as |prop|}}
  {{prop}}
  {{/each}}
  {{#each columns}}
  "{{propertyName}}"{{#if optional}}?{{/if}}: {{propertyType}} {{#if nullable}}| null {{/if}}
  {{/each}}
}
{{/inline}}
{{#*inline "funcGetAllFieldsPartial"}}
interface GetDataInput {
  client: Knex;
  where?: Partial<{{interfaceName}}>;
  orderBy?: Array<
    keyof {{interfaceName}} | { column: keyof {{interfaceName}}; order?: "asc" | "desc" }
  >;
}
export async function get{{name}}AllFields({
  client,
  where,
  orderBy,
}: GetDataInput){
const query = client<{{interfaceName}}>("{{name}}");
  if (where) {
    query.where(where);
  }
  if (orderBy) {
    query.orderBy(orderBy);
  }
  return query;
}
{{/inline}}
{{#*inline "funcGetBasicFieldsPartial"}}
export async function get{{name}}BasicFields({
    client,
    where,
    orderBy,
  }: GetDataInput) {
  type Get{{name}}BasicFieldsOutput = {
    {{#each columns}}
    {{#unless nullable}} 
    "{{propertyName}}"{{#if optional}}?{{/if}}: {{propertyType}} {{#if nullable}}| null {{/if}}
    {{/unless}}
    {{/each}}
  }

  const query = client
  .from<{{interfaceName}}>("{{name}}")
  .select<Get{{name}}BasicFieldsOutput[]>(
    {{#each columns}}
    {{#unless nullable}} 
    "{{propertyName}}",
    {{/unless}}
    {{/each}}
  )

  if (where) {
    query.where(where);
  }
  if (orderBy) {
    query.orderBy(orderBy);
  }
  return query;
}
{{/inline}}
{{#*inline "funcAddPartial"}}
interface AddFnInput {
  client: Knex;
  data: {{interfaceName}};
}
export async function add{{name}} ( {client, data}: AddFnInput){
  return client<{{interfaceName}}>("{{name}}")
    .insert(data)
    .returning([
      {{#each columns}}
      "{{propertyName}}",
      {{/each}}
    ]);
}
{{/inline}}
{{#*inline "funcDeletePartial"}}
interface DeleteFnInput {
  client: Knex;
  where: Partial<{{interfaceName}}>;
}
export async function delete{{name}} ( {client, where}: DeleteFnInput){
  return client<{{interfaceName}}>("{{name}}")
    .where(where)
    .del()
}
{{/inline}}
{{#*inline "funcUpdatePartial"}}
interface UpdateFnInput {
  client: Knex;
  data: Partial<{{interfaceName}}>;
  where: Partial<{{interfaceName}}>;
}
export async function update{{name}} ({client, data, where}: UpdateFnInput) {
  return client<{{interfaceName}}>("{{name}}")
    .where(where)
    .update(data)
}
{{/inline}}
/* eslint-disable @typescript-eslint/camelcase */
/* eslint-disable @typescript-eslint/class-name-casing */
/*
* This file was generated by a tool.
* Rerun sql-ts to regenerate this file.
*/

import Knex from 'knex';

{{#if config.tableAsNamespace}}
{{#each grouped.dbo.tables as |table|}}
export namespace {{table.name}} {
  {{> interfacePartial table}}  
  {{> funcGetAllFieldsPartial table}}
  {{> funcGetBasicFieldsPartial table}}
  {{> funcAddPartial table}}
  {{> funcDeletePartial table}}
  {{> funcUpdatePartial table}}
{{/each}}
}
{{else}}
{{#each grouped.dbo.tables as |table|}}
{{> interfacePartial table}}
{{> funcGetAllFieldsPartial table}}
{{> funcGetBasicFieldsPartial table}}
{{> funcAddPartial table}}
{{> funcDeletePartial table}}
{{> funcUpdatePartial table}}
{{/each}}
{{/if}}